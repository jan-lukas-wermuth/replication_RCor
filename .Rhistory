decision_spearman_array_MvPois_iid <- array(data = NA, dim = c(length(SampleSizes), MC, length(alphas_CIs_short)), dimnames = list(SampleSizes, 1:MC, alphas_CIs_short)) # Initialize results array
cl <- makeCluster(detectCores() - 1, type = "PSOCK")
registerDoParallel(cl)
for (j in seq_along(alphas_CIs_short)){
alpha <- alphas_CIs_short[j]
for (Ti in SampleSizes){
decision_spearman_MvPois_iid <- foreach(i = 1:MC, .combine = 'c') %dopar% {
set.seed(i)
XY <- Gen_MvPois_iid(Ti, alpha, i)
spearman <- RCor::RCor(XY[,1], XY[,2], method = "rho_b", IID = TRUE, Fisher = FALSE, Inference = TRUE)
as.numeric(data.table::between(rhobs_MvPois_iid_CIs_short[j], spearman[[2]], spearman[[3]]))
}
decision_spearman_array_MvPois_iid[as.character(Ti),,as.character(alpha)] <- decision_spearman_MvPois_iid
}
}
stopCluster(cl)
save(decision_spearman_array_MvPois_iid, file = here("results/simulations/coverages/spearman/rho_b_cov_MvPois_iid.RData"))
decision_spearman_array_MvPois_iid_fis <- array(data = NA, dim = c(length(SampleSizes), MC, length(alphas_CIs_short)), dimnames = list(SampleSizes, 1:MC, alphas_CIs_short)) # Initialize results array
cl <- makeCluster(detectCores() - 1, type = "PSOCK")
registerDoParallel(cl)
for (j in seq_along(alphas_CIs_short)){
alpha <- alphas_CIs_short[j]
for (Ti in SampleSizes){
decision_spearman_MvPois_iid_fis <- foreach(i = 1:MC, .combine = 'c') %dopar% {
set.seed(i)
XY <- Gen_MvPois_iid(Ti, alpha, i)
spearman <- RCor::RCor(XY[,1], XY[,2], method = "rho_b", IID = TRUE, Fisher = TRUE, Inference = TRUE)
as.numeric(data.table::between(rhobs_MvPois_iid_CIs_short[j], spearman[[2]], spearman[[3]]))
}
decision_spearman_array_MvPois_iid_fis[as.character(Ti),,as.character(alpha)] <- decision_spearman_MvPois_iid_fis
}
}
stopCluster(cl)
save(decision_spearman_array_MvPois_iid_fis, file = here("results/simulations/coverages/spearman/rho_b_cov_MvPois_iid_fis.RData"))
## "Multivariate Zipf" DGP (iid) -------------------------------------------------
alphas_CIs_short <- c(0, 0.255, 0.815)
decision_spearman_array_MvZipf_iid <- array(data = NA, dim = c(length(SampleSizes), MC, length(alphas_CIs_short)), dimnames = list(SampleSizes, 1:MC, alphas_CIs_short)) # Initialize results array
cl <- makeCluster(detectCores() - 1, type = "PSOCK")
registerDoParallel(cl)
for (j in seq_along(alphas_CIs_short)){
alpha <- alphas_CIs_short[j]
for (Ti in SampleSizes){
decision_spearman_MvZipf_iid <- foreach(i = 1:MC, .combine = 'c') %dopar% {
set.seed(i)
XY <- Gen_MvZipf_iid(Ti, alpha, i)
spearman <- RCor::RCor(XY[,1], XY[,2], method = "rho_b", IID = TRUE, Fisher = FALSE, Inference = TRUE)
as.numeric(data.table::between(rhobs_MvZipf_iid_CIs_short[j], spearman[[2]], spearman[[3]]))
}
decision_spearman_array_MvZipf_iid[as.character(Ti),,as.character(alpha)] <- decision_spearman_MvZipf_iid
}
}
stopCluster(cl)
save(decision_spearman_array_MvZipf_iid, file = here("results/simulations/coverages/spearman/rho_b_cov_MvZipf_iid.RData"))
decision_spearman_array_MvZipf_iid_fis <- array(data = NA, dim = c(length(SampleSizes), MC, length(alphas_CIs_short)), dimnames = list(SampleSizes, 1:MC, alphas_CIs_short)) # Initialize results array
cl <- makeCluster(detectCores() - 1, type = "PSOCK")
registerDoParallel(cl)
for (j in seq_along(alphas_CIs_short)){
alpha <- alphas_CIs_short[j]
for (Ti in SampleSizes){
decision_spearman_MvZipf_iid_fis <- foreach(i = 1:MC, .combine = 'c') %dopar% {
set.seed(i)
XY <- Gen_MvZipf_iid(Ti, alpha, i)
spearman <- RCor::RCor(XY[,1], XY[,2], method = "rho_b", IID = TRUE, Fisher = TRUE, Inference = TRUE)
as.numeric(data.table::between(rhobs_MvZipf_iid_CIs_short[j], spearman[[2]], spearman[[3]]))
}
decision_spearman_array_MvZipf_iid_fis[as.character(Ti),,as.character(alpha)] <- decision_spearman_MvZipf_iid_fis
}
}
stopCluster(cl)
save(decision_spearman_array_MvZipf_iid_fis, file = here("results/simulations/coverages/spearman/rho_b_cov_MvZipf_iid_fis.RData"))
## "Multivariate Skellam" DGP (iid) -------------------------------------------------
alphas_CIs_short <- c(-0.728, -0.365, 0, 0.365, 0.728)
decision_spearman_array_MvSkellam_iid <- array(data = NA, dim = c(length(SampleSizes), MC, length(alphas_CIs_short)), dimnames = list(SampleSizes, 1:MC, alphas_CIs_short)) # Initialize results array
cl <- makeCluster(detectCores() - 1, type = "PSOCK")
registerDoParallel(cl)
for (j in seq_along(alphas_CIs_short)){
alpha <- alphas_CIs_short[j]
for (Ti in SampleSizes){
decision_spearman_MvSkellam_iid <- foreach(i = 1:MC, .combine = 'c') %dopar% {
set.seed(i)
XY <- Gen_MvSkellam_iid(Ti, alpha, i)
spearman <- RCor::RCor(XY[,1], XY[,2], method = "rho_b", IID = TRUE, Fisher = FALSE, Inference = TRUE)
as.numeric(data.table::between(rhobs_MvSkellam_iid_CIs_short[j], spearman[[2]], spearman[[3]]))
}
decision_spearman_array_MvSkellam_iid[as.character(Ti),,as.character(alpha)] <- decision_spearman_MvSkellam_iid
}
}
stopCluster(cl)
save(decision_spearman_array_MvSkellam_iid, file = here("results/simulations/coverages/spearman/rho_b_cov_MvSkellam_iid.RData"))
decision_spearman_array_MvSkellam_iid_fis <- array(data = NA, dim = c(length(SampleSizes), MC, length(alphas_CIs_short)), dimnames = list(SampleSizes, 1:MC, alphas_CIs_short)) # Initialize results array
cl <- makeCluster(detectCores() - 1, type = "PSOCK")
registerDoParallel(cl)
for (j in seq_along(alphas_CIs_short)){
alpha <- alphas_CIs_short[j]
for (Ti in SampleSizes){
decision_spearman_MvSkellam_iid_fis <- foreach(i = 1:MC, .combine = 'c') %dopar% {
set.seed(i)
XY <- Gen_MvSkellam_iid(Ti, alpha, i)
spearman <- RCor::RCor(XY[,1], XY[,2], method = "rho_b", IID = TRUE, Fisher = TRUE, Inference = TRUE)
as.numeric(data.table::between(rhobs_MvSkellam_iid_CIs_short[j], spearman[[2]], spearman[[3]]))
}
decision_spearman_array_MvSkellam_iid_fis[as.character(Ti),,as.character(alpha)] <- decision_spearman_MvSkellam_iid_fis
}
}
stopCluster(cl)
save(decision_spearman_array_MvSkellam_iid_fis, file = here("results/simulations/coverages/spearman/rho_b_cov_MvSkellam_iid_fis.RData"))
# Continuous Time Series Processes ------------------------------------------------
## "Multivariate Normal" DGP (Time Series) -------------------------------------------------
alphas_CIs_short <- c(-0.815, -0.42, 0, 0.42, 0.815)
decision_spearman_array_norm_TS <- array(data = NA, dim = c(length(SampleSizes), MC, length(alphas_CIs_short)), dimnames = list(SampleSizes, 1:MC, alphas_CIs_short)) # Initialize results array
cl <- makeCluster(detectCores() - 1, type = "PSOCK")
registerDoParallel(cl)
for (j in seq_along(alphas_CIs_short)){
alpha <- alphas_CIs_short[j]
for (Ti in SampleSizes){
decision_spearman_norm_TS <- foreach(i = 1:MC, .combine = 'c') %dopar% {
set.seed(i)
XY <- Gen_Mvt_TS(Ti, alpha, i, Inf)
spearman <- RCor::RCor(XY[,1], XY[,2], method = "rho", IID = FALSE, Fisher = FALSE, Inference = TRUE)
as.numeric(data.table::between(rhos_norm_TS_CIs_short[j], spearman[[2]], spearman[[3]]))
}
decision_spearman_array_norm_TS[as.character(Ti),,as.character(alpha)] <- decision_spearman_norm_TS
}
}
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/Spearman_norm_TS/decision_spearman_array_combined.RData")
dimnames(decision_spearman_array_combined)
decision_spearman_array_norm_TS <- decision_spearman_array_combined["Norm",,,]
decision_spearman_array_norm_TS_fis <- decision_spearman_array_combined["Norm_Fis",,,]
here("results/simulations/coverages/spearman/rho_cov_norm_TS.RData")
save(decision_spearman_array_norm_TS, file = here("results/simulations/coverages/spearman/rho_cov_norm_TS.RData"))
save(decision_spearman_array_norm_TS_fis, file = here("results/simulations/coverages/spearman/rho_cov_norm_TS_fis.RData"))
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/Spearman_t4_TS/Spearman_coverage_TS_t4_1.RData")
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/Spearman_t4_TS/Spearman_coverage_TS_t4_1.RData")
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/Spearman_t4_TS/Spearman_coverage_TS_t4_2.RData")
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/Spearman_t4_TS/Spearman_coverage_TS_t4_3.RData")
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/Spearman_t4_TS/Spearman_coverage_TS_t4_4.RData")
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/Spearman_t4_TS/Spearman_coverage_TS_t4_5.RData")
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/Spearman_t4_TS/Spearman_coverage_TS_t4_1.RData")
decision_spearman_array_1 <- decision_spearman_array
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/Spearman_t4_TS/Spearman_coverage_TS_t4_2.RData")
decision_spearman_array_2 <- decision_spearman_array
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/Spearman_t4_TS/Spearman_coverage_TS_t4_3.RData")
decision_spearman_array_3 <- decision_spearman_array
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/Spearman_t4_TS/Spearman_coverage_TS_t4_4.RData")
decision_spearman_array_4 <- decision_spearman_array
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/Spearman_t4_TS/Spearman_coverage_TS_t4_5.RData")
decision_spearman_array_5 <- decision_spearman_array
decision_spearman_array_t4_TS <- abind(decision_spearman_array_1, decision_spearman_array_2, decision_spearman_array_3, decision_spearman_array_4, decision_spearman_array_5, along = 3)
decision_spearman_array <- abind(decision_spearman_array_1, decision_spearman_array_2, decision_spearman_array_3, decision_spearman_array_4, decision_spearman_array_5, along = 3)
dimnames(decision_spearman_array)
decision_spearman_array_t4_TS <- decision_spearman_array["t4",,,]
decision_spearman_array_t4_TS_fis <- decision_spearman_array["t4_Fis",,,]
save(decision_spearman_array_t4_TS, file = here("results/simulations/coverages/spearman/rho_cov_t4_TS.RData"))
save(decision_spearman_array_t4_TS_fis, file = here("results/simulations/coverages/spearman/rho_cov_t4_TS_fis.RData"))
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/Spearman_t1_TS/decision_spearman_array_combined.RData")
decision_spearman_array_t1_TS <- decision_spearman_array_combined["t1",,,]
decision_spearman_array_t1_TS <- decision_spearman_array_combined["Cauchy",,,]
decision_spearman_array_t1_TS_fis <- decision_spearman_array_combined["Cauchy_Fis",,,]
save(decision_spearman_array_t1_TS, file = here("results/simulations/coverages/spearman/rho_cov_t1_TS.RData"))
save(decision_spearman_array_t1_TS_fis, file = here("results/simulations/coverages/spearman/rho_cov_t1_TS_fis.RData"))
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/Spearman_TEAR_TS/Spearman_coverage_TS_TEAR_1.RData")
decision_spearman_array_1 <- decision_spearman_array
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/Spearman_TEAR_TS/Spearman_coverage_TS_TEAR_2.RData")
decision_spearman_array_2 <- decision_spearman_array
decision_spearman_array <- abind(decision_spearman_array_1, decision_spearman_array_2, along = 3)
dimnames(decision_spearman_array)
decision_spearman_array_TEAR_TS <- decision_spearman_array["TEAR",,,]
decision_spearman_array_TEAR_TS_fis <- decision_spearman_array["TEAR_Fis",,,]
save(decision_spearman_array_TEAR_TS, file = here("results/simulations/coverages/spearman/rho_cov_TEAR_TS.RData"))
save(decision_spearman_array_TEAR_TS_fis, file = here("results/simulations/coverages/spearman/rho_cov_TEAR_TS_fis.RData"))
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/rhob_TS_Pois1_coverage.RData")
dimnames(decision_rhob_array)
decision_spearman_array_MvPois_TS <- decision_rhob_array["Pois1_TS",,,]
decision_spearman_array_MvPois_TS_fis <- decision_rhob_array["Pois1_TS_Fis",,,]
save(decision_spearman_array_MvPois_TS, file = here("results/simulations/coverages/spearman/rho_b_cov_MvPois_TS.RData"))
save(decision_spearman_array_MvPois_TS_fis, file = here("results/simulations/coverages/spearman/rho_b_cov_MvPois_TS_fis.RData"))
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/Rhob_zipf_TS_graph/decision_rhob_array_combined.RData")
dimnames(decision_rhob_array_combined)
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/Rhob_zipf_TS/rhob_TS_Zipf_coverage_1.RData")
decision_rhob_array_1 <- decision_rhob_array
decision_list <- list()
# Loop from 1 to 91
for (i in 1:91) {
# Construct the file path
file_path <- paste0("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/Rhob_zipf_TS/rhob_TS_Zipf_coverage_", i, ".RData")
# Load the RData file (loads decision_rhob_array)
load(file_path)
# Save the array to the list with dynamic naming
decision_list[[i]] <- decision_rhob_array
# Optionally assign to individual variables if needed
assign(paste0("decision_rhob_array_", i), decision_rhob_array)
}
# Combine all arrays along 3rd dimension
decision_rhob_combined <- abind(decision_list, along = 3)
dimnames(decision_rhob_combined)
decision_spearman_array_MvZipf_TS <- decision_rhob_combined["Zipf_TS",,,]
decision_spearman_array_MvZipf_TS_fis <- decision_rhob_combined["Zipf_TS_Fis",,,]
save(decision_spearman_array_MvZipf_TS, file = here("results/simulations/coverages/spearman/rho_b_cov_MvZipf_TS.RData"))
save(decision_spearman_array_MvZipf_TS_fis, file = here("results/simulations/coverages/spearman/rho_b_cov_MvZipf_TS_fis.RData"))
decision_list <- list()
# Loop from 1 to 91
for (i in 1:91) {
# Construct the file path
file_path <- paste0("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_CIs/Rhob_skellam_TS/rhob_TS_Skellam_coverage_", i, ".RData")
# Load the RData file (loads decision_rhob_array)
load(file_path)
# Save the array to the list with dynamic naming
decision_list[[i]] <- decision_rhob_array
# Optionally assign to individual variables if needed
assign(paste0("decision_rhob_array_", i), decision_rhob_array)
}
# Combine all arrays along 3rd dimension
decision_rhob_combined <- abind(decision_list, along = 3)
dimnames(decision_rhob_combined)
decision_spearman_array_MvSkellam_TS <- decision_rhob_combined["Skellam_TS",,,]
decision_spearman_array_MvSkellam_TS_fis <- decision_rhob_combined["Skellam_TS_Fis",,,]
save(decision_spearman_array_MvSkellam_TS, file = here("results/simulations/coverages/spearman/rho_b_cov_MvSkellam_TS.RData"))
save(decision_spearman_array_MvSkellam_TS_fis, file = here("results/simulations/coverages/spearman/rho_b_cov_MvSkellam_TS_fis.RData"))
# Title:      Size and Power Simulations
# Author:     Jan-Lukas Wermuth
# Date:       2025-05-09
# Purpose:    This script simulates the size and power values
#             for tau and gamma for all the DGPs considered in the paper.
rm(list = ls())
library(mnorm)
library(DescTools)
library(data.table)
library(tsDyn)
library(doParallel)
library(doRNG)
library(foreach)
library(here)
# library(devtools)
# install_github("jan-lukas-wermuth/RCor")
library(RCor)
invisible(lapply(list.files(here("code/functions"), pattern = "\\.R$", full.names = TRUE), source)) # Load all the functions
# Parameter Specification ------------------------------------------------
MC <- 1000
SampleSizes <- c(50, 200, 800)
coefficients_cont <- c("r", "tau", "rho")
coefficients_disc <- c("r", "tau", "tau_b", "gamma", "rho_b")
# Continuous IID Processes ------------------------------------------------
## Multivariate normal DGP ------------------------------------------------
alphas_Test_short <- c(-0.16, -0.08, 0, 0.08, 0.16)
pval_array_norm_iid <- array(data = NA, dim = c(length(coefficients_cont), length(SampleSizes), MC, length(alphas_Test_short)), dimnames = list(coefficients_cont, SampleSizes, 1:MC, alphas_Test_short)) # Initialize results array
cl <- makeCluster(detectCores() - 1, type = "PSOCK")
registerDoParallel(cl)
for (coef in coefficients_cont){
for (alpha in alphas_Test_short){
for (Ti in SampleSizes){
print(c(Ti, alpha, coef))
pval_norm_iid <- foreach(i = 1:MC, .combine = 'c') %dopar% {
set.seed(i)
XY <- Gen_MvN_iid(Ti, alpha, i)
RCor::RCor(XY[,1], XY[,2], method = coef, IID = TRUE, Fisher = FALSE, Inference = TRUE)[[4]]
}
pval_array_norm_iid[coef,as.character(Ti),,as.character(alpha)] <- pval_norm_iid
}
}
}
stopCluster(cl)
save(pval_array_norm_iid, file = here("results/simulations/size_power/pval_norm_iid.RData"))
dimnames(pval_array_norm_iid)
colMeans(pval_array_norm_iid["r","50",,])
pval_array_norm_iid["r","50",,]
pval_array_norm_iid["r","50",,]<0.1
colMeans(pval_array_norm_iid["r","50",,]<0.1)
colMeans(pval_array_norm_iid["r","50",,]<=0.1)
colMeans(pval_array_norm_iid["r","200",,]<=0.1)
colMeans(pval_array_norm_iid["r","800",,]<=0.1)
colMeans(pval_array_norm_iid["tau","800",,]<=0.1)
colMeans(pval_array_norm_iid["tau","500",,]<=0.1)
colMeans(pval_array_norm_iid["tau","50",,]<=0.1)
Ti
Ti <- 50
alpha
i
i <- 1
set.seed(i)
XY <- Gen_MvN_iid(Ti, alpha, i)
RCor::RCor(XY[,1], XY[,2], method = coef, IID = TRUE, Fisher = FALSE, Inference = TRUE)[[4]]
RCor::RCor(XY[,1], XY[,2], method = coef, IID = TRUE, Fisher = FALSE, Inference = TRUE)
# Title:      Size and Power Simulations
# Author:     Jan-Lukas Wermuth
# Date:       2025-05-09
# Purpose:    This script simulates the size and power values
#             for tau and gamma for all the DGPs considered in the paper.
rm(list = ls())
library(mnorm)
library(DescTools)
library(data.table)
library(tsDyn)
library(doParallel)
library(doRNG)
library(foreach)
library(here)
# library(devtools)
# install_github("jan-lukas-wermuth/RCor")
library(RCor)
invisible(lapply(list.files(here("code/functions"), pattern = "\\.R$", full.names = TRUE), source)) # Load all the functions
# Parameter Specification ------------------------------------------------
MC <- 1000
SampleSizes <- c(50, 200, 800)
coefficients_cont <- c("r", "tau", "rho")
coefficients_disc <- c("r", "tau", "tau_b", "gamma", "rho_b")
# Continuous IID Processes ------------------------------------------------
## Multivariate normal DGP ------------------------------------------------
alphas_Test_short <- c(-0.16, -0.08, 0, 0.08, 0.16)
pval_array_norm_iid <- array(data = NA, dim = c(length(coefficients_cont), length(SampleSizes), MC, length(alphas_Test_short)), dimnames = list(coefficients_cont, SampleSizes, 1:MC, alphas_Test_short)) # Initialize results array
cl <- makeCluster(detectCores() - 1, type = "PSOCK")
registerDoParallel(cl)
for (coef in coefficients_cont){
for (alpha in alphas_Test_short){
for (Ti in SampleSizes){
print(c(Ti, alpha, coef))
pval_norm_iid <- foreach(i = 1:MC, .combine = 'c') %dopar% {
set.seed(i)
XY <- Gen_MvN_iid(Ti, alpha, i)
RCor::RCor(XY[,1], XY[,2], method = coef, IID = TRUE, Fisher = FALSE, Inference = TRUE)[[5]]
}
pval_array_norm_iid[coef,as.character(Ti),,as.character(alpha)] <- pval_norm_iid
}
}
}
stopCluster(cl)
save(pval_array_norm_iid, file = here("results/simulations/size_power/pval_norm_iid.RData"))
stopCluster(cl)
dimnames(pval_array_t4_iid)
dimnames(pval_array_norm_iid)
colMeans(pval_array_norm_iid["r", "50",,])
colMeans(pval_array_norm_iid["r", "50",,]<0.1)
colMeans(pval_array_norm_iid["tau", "50",,]<0.1)
colMeans(pval_array_norm_iid["rho", "50",,]<0.1)
## "Multivariate t(4)" DGP (iid) -------------------------------------------------
alphas_Test_short <- c(-0.14, -0.07, 0, 0.07, 0.14)
pval_array_t4_iid <- array(data = NA, dim = c(length(coefficients_cont), length(SampleSizes), MC, length(alphas_Test_short)), dimnames = list(coefficients_cont, SampleSizes, 1:MC, alphas_Test_short)) # Initialize results array
cl <- makeCluster(detectCores() - 1, type = "PSOCK")
registerDoParallel(cl)
for (coef in coefficients_cont){
for (alpha in alphas_Test_short){
for (Ti in SampleSizes){
pval_t4_iid <- foreach(i = 1:MC, .combine = 'c') %dopar% {
set.seed(i)
XY <- Gen_Mvt_iid(Ti, alpha, i, 4)
RCor::RCor(XY[,1], XY[,2], method = coef, IID = TRUE, Fisher = FALSE, Inference = TRUE)[[5]]
}
pval_array_t4_iid[coef,as.character(Ti),,as.character(alpha)] <- pval_t4_iid
}
}
}
stopCluster(cl)
save(pval_array_t4_iid, file = here("results/simulations/size_power/pval_t4_iid.RData"))
## "Multivariate t(1)" DGP (iid) -------------------------------------------------
alphas_Test_short <- c(-0.07, -0.03, 0, 0.03, 0.07)
pval_array_t1_iid <- array(data = NA, dim = c(length(coefficients_cont), length(SampleSizes), MC, length(alphas_Test_short)), dimnames = list(coefficients_cont, SampleSizes, 1:MC, alphas_Test_short)) # Initialize results array
cl <- makeCluster(detectCores() - 1, type = "PSOCK")
registerDoParallel(cl)
for (coef in coefficients_cont){
for (alpha in alphas_Test_short){
for (Ti in SampleSizes){
pval_t1_iid <- foreach(i = 1:MC, .combine = 'c') %dopar% {
set.seed(i)
XY <- Gen_Mvt_iid(Ti, alpha, i, 1)
RCor::RCor(XY[,1], XY[,2], method = coef, IID = TRUE, Fisher = FALSE, Inference = TRUE)[[5]]
}
pval_array_t1_iid[coef,as.character(Ti),,as.character(alpha)] <- pval_t1_iid
}
}
}
stopCluster(cl)
save(pval_array_t1_iid, file = here("results/simulations/size_power/pval_t1_iid.RData"))
## Normal Exponential DGP (iid) -------------------------------------------------
alphas_Test_short <- c(-0.16, -0.08, 0, 0.08, 0.16)
pval_array_Nexp_iid <- array(data = NA, dim = c(length(coefficients_cont), length(SampleSizes), MC, length(alphas_Test_short)), dimnames = list(coefficients_cont, SampleSizes, 1:MC, alphas_Test_short)) # Initialize results array
cl <- makeCluster(detectCores() - 1, type = "PSOCK")
registerDoParallel(cl)
for (coef in coefficients_cont){
for (alpha in alphas_Test_short){
for (Ti in SampleSizes){
pval_Nexp_iid <- foreach(i = 1:MC, .combine = 'c') %dopar% {
set.seed(i)
XY <- Gen_NExp_iid(Ti, alpha, i)
RCor::RCor(XY[,1], XY[,2], method = coef, IID = TRUE, Fisher = FALSE, Inference = TRUE)[[5]]
}
pval_array_Nexp_iid[coef,as.character(Ti),,as.character(alpha)] <- pval_Nexp_iid
}
}
}
stopCluster(cl)
save(pval_array_Nexp_iid, file = here("results/simulations/size_power/pval_Nexp_iid.RData"))
# Discrete IID Processes ------------------------------------------------
## "Multivariate Poisson" DGP (iid) -------------------------------------------------
alphas_Test_short <- c(0, 0.04, 0.09)
pval_array_MvPois_iid <- array(data = NA, dim = c(length(coefficients_disc), length(SampleSizes), MC, length(alphas_Test_short)), dimnames = list(coefficients_disc, SampleSizes, 1:MC, alphas_Test_short)) # Initialize results array
cl <- makeCluster(detectCores() - 1, type = "PSOCK")
registerDoParallel(cl)
for (coef in coefficients_disc){
for (alpha in alphas_Test_short){
for (Ti in SampleSizes){
pval_MvPois_iid <- foreach(i = 1:MC, .combine = 'c') %dopar% {
set.seed(i)
XY <- Gen_MvPois_iid(Ti, alpha, i)
RCor::RCor(XY[,1], XY[,2], method = coef, IID = TRUE, Fisher = FALSE, Inference = TRUE)[[5]]
}
pval_array_MvPois_iid[coef,as.character(Ti),,as.character(alpha)] <- pval_MvPois_iid
}
}
}
stopCluster(cl)
save(pval_array_MvPois_iid, file = here("results/simulations/size_power/pval_MvPois_iid.RData"))
## "Multivariate Zipf" DGP (iid) -------------------------------------------------
alphas_Test_short <- c(0, 0.008, 0.019)
pval_array_MvZipf_iid <- array(data = NA, dim = c(length(coefficients_disc), length(SampleSizes), MC, length(alphas_Test_short)), dimnames = list(coefficients_disc, SampleSizes, 1:MC, alphas_Test_short)) # Initialize results array
cl <- makeCluster(detectCores() - 1, type = "PSOCK")
registerDoParallel(cl)
for (coef in coefficients_disc){
for (alpha in alphas_Test_short){
for (Ti in SampleSizes){
pval_MvZipf_iid <- foreach(i = 1:MC, .combine = 'c') %dopar% {
set.seed(i)
XY <- Gen_MvZipf_iid(Ti, alpha, i)
RCor::RCor(XY[,1], XY[,2], method = coef, IID = TRUE, Fisher = FALSE, Inference = TRUE)[[5]]
}
pval_array_MvZipf_iid[coef,as.character(Ti),,as.character(alpha)] <- pval_MvZipf_iid
}
}
}
stopCluster(cl)
save(pval_array_MvZipf_iid, file = here("results/simulations/size_power/pval_MvZipf_iid.RData"))
## "Multivariate Skellam" DGP (iid) -------------------------------------------------
alphas_Test_short <- c(-0.11, -0.055, 0, 0.055, 0.11)
pval_array_MvSkellam_iid <- array(data = NA, dim = c(length(coefficients_disc), length(SampleSizes), MC, length(alphas_Test_short)), dimnames = list(coefficients_disc, SampleSizes, 1:MC, alphas_Test_short)) # Initialize results array
cl <- makeCluster(detectCores() - 1, type = "PSOCK")
registerDoParallel(cl)
for (coef in coefficients_disc){
for (alpha in alphas_Test_short){
for (Ti in SampleSizes){
pval_MvSkellam_iid <- foreach(i = 1:MC, .combine = 'c') %dopar% {
set.seed(i)
XY <- Gen_MvSkellam_iid(Ti, alpha, i)
RCor::RCor(XY[,1], XY[,2], method = coef, IID = TRUE, Fisher = FALSE, Inference = TRUE)[[5]]
}
pval_array_MvSkellam_iid[coef,as.character(Ti),,as.character(alpha)] <- pval_MvSkellam_iid
}
}
}
stopCluster(cl)
save(pval_array_MvSkellam_iid, file = here("results/simulations/size_power/pval_MvSkellam_iid.RData"))
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_Testing/Kendall_BivNorm.RData")
dimnames(decision_kendall_array)
decision_array_norm_iid_plot <- decision_kendall_array
save(decision_array_norm_iid_plot, file = "/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/replication_RCor/results/simulations/size_power/decision_norm_iid_plot.RData")
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/replication_RCor/results/simulations/size_power/pval_MvPois_iid.RData")
dimnames(pval_array_MvPois_iid)
dimnames(decision_array_norm_iid_plot)
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_Testing/Kendall_BivNorm.RData")
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_Testing/Kendall_BivNorm.RData")
dimnames(decision_kendall_array)
decision_array_norm_iid_plot <- decision_kendall_array["0.1",,]
decision_array_norm_iid_plot <- decision_kendall_array["0.1",,,]
dimnames(decision_array_norm_iid_plot)
dim(decision_array_norm_iid_plot)
dim(decision_array_norm_iid_plot) <- c(1, dim(decision_array_norm_iid_plot))
dim(decision_array_norm_iid_plot)
dimnames(decision_array_norm_iid_plot)
dim(decision_kendall_array)
dimnames(decision_kendall_array)
decision_array_norm_iid_plot <- decision_kendall_array["0.1",,,]
dimnames(decision_array_norm_iid_plot)
new_dimnames <- c(dimnames(decision_array_norm_iid_plot), list("tau"))
new_dimnames
new_dimnames <- c(list("tau"), dimnames(decision_array_norm_iid_plot))
new_dimnames
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_Testing/Kendall_Cauchy.RData")
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_Testing/Pearson_BivNorm.RData")
decision_array_norm_iid_plot["r",,,]
decision_array_norm_iid_plot["r",,,,]
decision_array_norm_iid_plot["r",,]
decision_array_norm_iid_plot["tau",,]
decision_array_norm_iid_plot["tau",,,]
dimnames(decision_array_norm_iid_plot)
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_Testing/Kendall_BivNorm.RData")
decision_array_norm_iid_plot <- decision_kendall_array["0.1",,,]
dimnames(decision_array_norm_iid_plot)
new_dimnames <- c(list("tau"), dimnames(decision_array_norm_iid_plot))
new_dimnames
dim(decision_array_norm_iid_plot) <- c(1, dim(decision_array_norm_iid_plot))
dim(decision_array_norm_iid_plot)
dimnames(decision_array_norm_iid_plot) <- new_dimnames
dimnames(decision_array_norm_iid_plot)
load("/Users/lukaswermuth/Documents/Dr.Wermuth/Projects/RankAutocorrelations/Results/Simulations/2Series_Testing/Pearson_BivNorm.RData")
decision_array_norm_iid_plot["r",,,] <- decision_pearson_array
dim(decision_array_norm_iid_plot)
new_dimnames
new_dimnames[-1]
new_dimnames <- list("r", new_dimnames[-1])
new_dimnames
new_dimnames <- c(list("r"), dimnames(decision_array_norm_iid_plot))
new_dimnames
new_dimnames <- c(list("r"), dimnames(decision_pearson_array))
new_dimnames
decision_pearson_array <- decision_pearson_array["0.1",,,]
dimnames(decision_pearson_array)
new_dimnames <- c(list("r"), dimnames(decision_pearson_array))
new_dimnames
dim(decision_pearson_array) <- c(1, dim(decision_pearson_array))
dim(decision_pearson_array)
dimnames(decision_pearson_array) <- new_dimnames
dimnames(decision_pearson_array)
decision_array_norm_iid_plot <- abind(decision_array_norm_iid_plot, decision_pearson_array, along = 1)
dim(decision_array_norm_iid_plot)
dimnames(decision_array_norm_iid_plot)
